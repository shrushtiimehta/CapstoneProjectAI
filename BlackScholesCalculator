using System;

namespace Black_Scholes_Calculator
{
    public static class BSCalculator
    {
        public static double CumulativeNormalDistribution(double x)
        {
            double a1 = 0.254829592;
            double a2 = -0.284496736;
            double a3 = 1.421413741;
            double a4 = -1.453152027;
            double a5 = 1.061405429;
            double p = 0.3275911;

            double sign = 1;
            if (x < 0)
            {
                sign = -1;
            }

            x = Math.Abs(x) / Math.Sqrt(2);

            double t = 1 / (1 + p * x);
            double y = 1 - Math.Exp(-x * x) * (a1 * t + a2 * Math.Pow(t, 2) + a3 * Math.Pow(t, 3) + a4 * Math.Pow(t, 4) + a5 * Math.Pow(t, 5));

            return 0.5 * (1 + sign * y);
        }

        public static double ProbabilityNormalDistribution(double x)
        {
            return 1 / Math.Sqrt(2 * Math.PI) * Math.Exp(-Math.Pow(x, 2) / 2);
        }

        public static double BSDelta(string flag, double s, double k, double rf, double t, double vol)
        {
            double d1 = (Math.Log(s / k) + (rf + Math.Pow(vol, 2) / 2) * t) / vol / Math.Sqrt(t);
            double n1 = BSCalculator.CumulativeNormalDistribution(d1);
            if (flag == "c" | flag == "CE")
            {
                return n1;
            }
            else if (flag == "p" | flag == "PE")
            {
                return n1 - 1;
            }
            else
            {
                throw new Exception("Whong flag passed.");
            }
        }

        public static double BSGamma(string flag, double s, double k, double rf, double t, double vol)
        {
            double d1 = (Math.Log(s / k) + (rf + Math.Pow(vol, 2) / 2) * t) / vol / Math.Sqrt(t);
            double p1 = BSCalculator.ProbabilityNormalDistribution(d1);
            double gamma = 1 / s / vol / Math.Sqrt(t) * p1;
            return gamma;
        }

        public static double BSVega(string flag, double s, double k, double rf, double t, double vol)
        {
            double d1 = (Math.Log(s / k) + (rf + Math.Pow(vol, 2) / 2) * t) / vol / Math.Sqrt(t);
            double p1 = BSCalculator.ProbabilityNormalDistribution(d1);
            double vega = s * Math.Sqrt(t) * p1;
            return vega;
        }

        public static double BSTheta(string flag, double s, double k, double rf, double t, double vol)
        {
            double d1 = (Math.Log(s / k) + (rf + Math.Pow(vol, 2) / 2) * t) / vol / Math.Sqrt(t);
            double d2 = d1 - vol * Math.Sqrt(t);

            double theta;
            if (flag == "c" | flag == "CE")
            {
                double p1 = BSCalculator.ProbabilityNormalDistribution(d1);
                double n2 = BSCalculator.CumulativeNormalDistribution(d2);
                theta = -s / 2 / Math.Sqrt(t) * p1 * vol - rf * k * n2 * Math.Exp(-rf * t);
            }
            else if (flag == "p" | flag == "PE")
            {
                double p1 = BSCalculator.ProbabilityNormalDistribution(-d1);
                double n2 = BSCalculator.CumulativeNormalDistribution(-d2);
                theta = -s / 2 / Math.Sqrt(t) * p1 * vol + rf * k * n2 * Math.Exp(-rf * t);
            }
            else
            {
                throw new Exception("Whong flag passed.");
            }
            return theta;
        }

        public static double BSPrice(string flag, double s, double k, double rf, double t, double vol)
        {
            double d1 = (Math.Log(s / k) + (rf + Math.Pow(vol, 2) / 2) * t) / vol / Math.Sqrt(t);
            double d2 = d1 - vol * Math.Sqrt(t);

            double p;
            if (flag == "c" | flag == "CE")
            {
                double n1 = BSCalculator.CumulativeNormalDistribution(d1);
                double n2 = BSCalculator.CumulativeNormalDistribution(d2);
                p = s * n1 - k * n2 * Math.Exp(-rf * t);
            }
            else if (flag == "p" | flag == "PE")
            {
                double n1 = BSCalculator.CumulativeNormalDistribution(-d1);
                double n2 = BSCalculator.CumulativeNormalDistribution(-d2);
                p = -s * n1 + k * n2 * Math.Exp(-rf * t);
            }
            else
            {
                throw new Exception("Whong flag passed.");
            }
            return p;
        }

        public static double BSVanna(string flag, double s, double k, double rf, double t, double vol)
        {
            double d1 = (Math.Log(s / k) + (rf + Math.Pow(vol, 2) / 2) * t) / vol / Math.Sqrt(t);
            double d2 = d1 - vol * Math.Sqrt(t);

            double p1 = ProbabilityNormalDistribution(d1);
            return -d2 * p1 / vol;
        }

        public static double BSVomma(string flag, double s, double k, double rf, double t, double vol)
        {
            double d1 = (Math.Log(s / k) + (rf + Math.Pow(vol, 2) / 2) * t) / vol / Math.Sqrt(t);
            double d2 = d1 - vol * Math.Sqrt(t);

            double p1 = ProbabilityNormalDistribution(d1);
            return s * p1 * Math.Sqrt(t) * d1 * d2 / vol;
        }

        public static double BSZomma(string flag, double s, double k, double rf, double t, double vol)
        {
            double d1 = (Math.Log(s / k) + (rf + Math.Pow(vol, 2) / 2) * t) / vol / Math.Sqrt(t);
            double d2 = d1 - vol * Math.Sqrt(t);
            double p1 = ProbabilityNormalDistribution(d1);

            return p1 * (d1 * d2 - 1) / s / Math.Pow(vol, 2) / Math.Pow(t, 0.5);
        }

        public static double BSVeta(string flag, double s, double k, double rf, double t, double vol)
        {
            double d1 = (Math.Log(s / k) + (rf + Math.Pow(vol, 2) / 2) * t) / vol / Math.Sqrt(t);
            double d2 = d1 - vol * Math.Sqrt(t);
            double p1 = ProbabilityNormalDistribution(d1);

            return s * p1 * Math.Pow(t, 0.5) * (rf * d1 / vol / Math.Pow(t, 0.5) - (1 + d1 * d2) / 2 / t);
        }

        public static double BSUltima(string flag, double s, double k, double rf, double t, double vol)
        {
            double d1 = (Math.Log(s / k) + (rf + Math.Pow(vol, 2) / 2) * t) / vol / Math.Sqrt(t);
            double d2 = d1 - vol * Math.Sqrt(t);
            double p1 = ProbabilityNormalDistribution(d1);

            return s * p1 * Math.Pow(t, 0.5) * (rf * d1 / vol / Math.Pow(t, 0.5) - (1 + d1 * d2) / 2 / t);
        }

        public static double BSIVBinarySearch(string flag, double s, double k, double rf, double t, double price, double l = 0,
            double u = 3, double thresh = 0.00001, int flag1 = 1)
        {
            if (flag1 > 100)
            {
                return 0;
            }
            else
            {
                double m = (l + u) / 2;
                double p1 = 0;
                double p2 = 0;
                if (flag1 == 1)
                {
                    p1 = BSCalculator.BSPrice(flag, s, k, rf, t, l);
                    p2 = BSCalculator.BSPrice(flag, s, k, rf, t, u);
                }
                double p = BSCalculator.BSPrice(flag, s, k, rf, t, m);

                if (flag1 == 1)
                {
                    if (price < p1)
                    {
                        return l;
                    }
                    else if (price > p2)
                    {
                        return u;
                    }
                    else
                    {
                        if (Math.Abs(price - p) / price < thresh)
                        {
                            return m;
                        }
                        else if (price < p)
                        {
                            return BSCalculator.BSIVBinarySearch(flag, s, k, rf, t, price, l, m, thresh, flag1 + 1);
                        }
                        else
                        {
                            return BSCalculator.BSIVBinarySearch(flag, s, k, rf, t, price, m, u, thresh, flag1 + 1);
                        }
                    }
                }
                else
                {
                    if (Math.Abs(price - p) / price < thresh)
                    {
                        return m;
                    }
                    else if (price < p)
                    {
                        return BSCalculator.BSIVBinarySearch(flag, s, k, rf, t, price, l, m, thresh, flag1 + 1);
                    }
                    else
                    {
                        return BSCalculator.BSIVBinarySearch(flag, s, k, rf, t, price, m, u, thresh, flag1 + 1);
                    }
                }
            }

        }

    }

    public static class Black76Calculator
    {
        public static double Black76Delta(char flag, double f, double k, double rf, double t, double vol)
        {
            double d1 = (Math.Log(f / k) + Math.Pow(vol, 2) / 2 * t) / vol / Math.Sqrt(t);
            double n1 = BSCalculator.CumulativeNormalDistribution(d1);
            if (flag == 'c')
            {
                return n1 * Math.Exp(-rf * t);
            }
            else
            {
                return (n1 - 1) * Math.Exp(-rf * t);
            }
        }

        public static double Black76Price(char flag, double f, double k, double rf, double t, double vol)
        {
            double d1 = (Math.Log(f / k) + Math.Pow(vol, 2) / 2 * t) / vol / Math.Sqrt(t);
            double d2 = d1 - vol * Math.Sqrt(t);

            double p;
            if (flag == 'c')
            {
                double n1 = BSCalculator.CumulativeNormalDistribution(d1);
                double n2 = BSCalculator.CumulativeNormalDistribution(d2);
                p = (f * n1 - k * n2) * Math.Exp(-rf * t);
            }
            else
            {
                double n1 = BSCalculator.CumulativeNormalDistribution(-d1);
                double n2 = BSCalculator.CumulativeNormalDistribution(-d2);
                p = (-f * n1 + k * n2) * Math.Exp(-rf * t);
            }
            return p;
        }

        public static double Black76IVBinarySearch(char flag, double f, double k, double rf, double t, double price, double l, double u, double thresh, int flag1)
        {
            if (flag1 > 100)
            {
                return 0;
            }
            else
            {
                double m = (l + u) / 2;
                double p1 = 0;
                double p2 = 0;
                if (flag1 == 1)
                {
                    p1 = Black76Price(flag, f, k, rf, t, l);
                    p2 = Black76Price(flag, f, k, rf, t, u);
                }
                double p = Black76Price(flag, f, k, rf, t, m);

                if (flag1 == 1)
                {
                    if (price < p1)
                    {
                        return l;
                    }
                    else if (price > p2)
                    {
                        return u;
                    }
                    else
                    {
                        if (Math.Abs(price - p) / price < thresh)
                        {
                            return m;
                        }
                        else if (price < p)
                        {
                            return Black76IVBinarySearch(flag, f, k, rf, t, price, l, m, thresh, flag1 + 1);
                        }
                        else
                        {
                            return Black76IVBinarySearch(flag, f, k, rf, t, price, m, u, thresh, flag1 + 1);
                        }
                    }
                }
                else
                {
                    if (Math.Abs(price - p) / price < thresh)
                    {
                        return m;
                    }
                    else if (price < p)
                    {
                        return Black76IVBinarySearch(flag, f, k, rf, t, price, l, m, thresh, flag1 + 1);
                    }
                    else
                    {
                        return Black76IVBinarySearch(flag, f, k, rf, t, price, m, u, thresh, flag1 + 1);
                    }
                }
            }
        }
    }
}
